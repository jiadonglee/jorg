#!/usr/bin/env python3
"""
Radiative Transfer Validation Test: Jorg vs Korg.jl

This test validates Jorg's radiative transfer implementation against Korg.jl
by comparing flux calculations across different schemes and stellar types.

Uses the Korg reference script to generate test data and compares results.
"""

import sys
import os
import subprocess
import json
import numpy as np
import jax.numpy as jnp
from pathlib import Path

# Add Jorg to path
jorg_path = Path(__file__).parent.parent.parent / "src"
sys.path.insert(0, str(jorg_path))

from jorg.radiative_transfer import (
    radiative_transfer, 
    RadiativeTransferResult,
    generate_mu_grid,
    calculate_rays
)
from jorg.constants import PLANCK_H, BOLTZMANN_K, SPEED_OF_LIGHT


def create_test_atmosphere(n_layers=20):
    """Create simple test atmosphere matching Korg script"""
    # Match Korg test parameters
    tau_5000s = np.exp(np.linspace(np.log(1e-4), np.log(10), n_layers))
    temperatures = 5000 + 1000 * np.exp(-tau_5000s)
    heights = -np.log(tau_5000s) * 1e6  # cm
    pressures = tau_5000s * 1e6
    
    return {
        'tau_5000': tau_5000s,
        'temperature': temperatures, 
        'height': heights,
        'pressure': pressures
    }


def create_test_opacity_and_source(atmosphere, wavelengths):
    """Create test absorption coefficient and source function"""
    n_layers = len(atmosphere['tau_5000'])
    n_wavelengths = len(wavelengths)
    
    # Absorption coefficient (simplified model)
    alpha = np.zeros((n_layers, n_wavelengths))
    for i in range(n_layers):
        for j in range(n_wavelengths):
            # Base continuum absorption
            base_alpha = 1e-6 * atmosphere['tau_5000'][i]
            # Wavelength dependence (Rayleigh-Jeans)
            wavelength_factor = (wavelengths[j] / 5500)**(-4)
            alpha[i, j] = base_alpha * wavelength_factor
    
    # Source function (Planck function)
    S = np.zeros((n_layers, n_wavelengths))
    frequencies = SPEED_OF_LIGHT / (wavelengths * 1e-8)  # Convert Å to Hz
    
    for i in range(n_layers):
        for j in range(n_wavelengths):
            T = atmosphere['temperature'][i]
            nu = frequencies[j]
            h_nu_kt = PLANCK_H * nu / (BOLTZMANN_K * T)
            
            # Planck function
            S[i, j] = (2 * PLANCK_H * nu**3 / SPEED_OF_LIGHT**2) / (np.exp(h_nu_kt) - 1)
    
    return jnp.array(alpha), jnp.array(S)


def run_korg_reference_test():
    """Run Korg radiative transfer reference script"""
    korg_script = Path(__file__).parent.parent.parent.parent / "misc/examples/korg_radiative_transfer_test.jl"
    
    if not korg_script.exists():
        print(f"WARNING: Korg reference script not found at {korg_script}")
        return None
    
    try:
        # Change to script directory to handle relative paths
        script_dir = korg_script.parent
        os.chdir(script_dir)
        
        # Run Julia script
        result = subprocess.run(
            ["julia", "--project=../../..", str(korg_script.name)],
            capture_output=True, text=True, timeout=300
        )
        
        if result.returncode != 0:
            print(f"Korg script failed: {result.stderr}")
            return None
            
        return script_dir
        
    except subprocess.TimeoutExpired:
        print("Korg script timed out")
        return None
    except Exception as e:
        print(f"Error running Korg script: {e}")
        return None


def load_korg_reference_data(data_dir):
    """Load reference data generated by Korg script"""
    import pandas as pd
    
    try:
        # Load test parameters
        params_file = data_dir / "korg_test_params.json"
        if params_file.exists():
            with open(params_file) as f:
                params = json.load(f)
        else:
            params = {}
        
        # Load atmosphere data
        atm_data = pd.read_csv(data_dir / "korg_test_atmosphere.csv")
        wavelengths_data = pd.read_csv(data_dir / "korg_test_wavelengths.csv")
        alpha_data = pd.read_csv(data_dir / "korg_test_alpha.csv")
        source_data = pd.read_csv(data_dir / "korg_test_source.csv")
        
        # Load results for different schemes
        results = {}
        for scheme in params.get('schemes_tested', ['anchored_linear_flux_only']):
            result_file = data_dir / f"korg_result_{scheme}.csv"
            if result_file.exists():
                results[scheme] = pd.read_csv(result_file)
        
        return {
            'params': params,
            'atmosphere': atm_data,
            'wavelengths': wavelengths_data,
            'alpha': alpha_data,
            'source': source_data,
            'results': results
        }
        
    except Exception as e:
        print(f"Error loading Korg reference data: {e}")
        return None


def test_jorg_radiative_transfer(atmosphere, alpha, S, wavelengths, schemes_to_test):
    """Test Jorg radiative transfer with different schemes"""
    spatial_coord = jnp.array(atmosphere['height'])
    n_mu_points = 5
    
    results = {}
    
    for tau_scheme, I_scheme in schemes_to_test:
        scheme_key = f"{tau_scheme}_{I_scheme}"
        print(f"\nTesting Jorg scheme: {scheme_key}")
        
        try:
            # Set up reference arrays for anchored scheme
            alpha_ref = alpha[:, 0] if tau_scheme == "anchored" else None
            tau_ref = jnp.array(atmosphere['tau_5000']) if tau_scheme == "anchored" else None
            
            # Run radiative transfer
            result = radiative_transfer(
                alpha=alpha,
                S=S,
                spatial_coord=spatial_coord,
                mu_points=n_mu_points,
                spherical=False,  # Plane-parallel
                alpha_ref=alpha_ref,
                tau_ref=tau_ref,
                tau_scheme=tau_scheme,
                I_scheme=I_scheme
            )
            
            results[scheme_key] = {
                'flux': np.array(result.flux),
                'mu_grid': np.array(result.mu_grid),
                'mu_weights': np.array(result.mu_weights),
                'success': True
            }
            
            print(f"  ✓ Success!")
            print(f"    Flux range: {np.min(result.flux):.2e} - {np.max(result.flux):.2e}")
            print(f"    All finite: {np.all(np.isfinite(result.flux))}")
            
        except Exception as e:
            print(f"  ✗ Failed: {e}")
            results[scheme_key] = {'success': False, 'error': str(e)}
    
    return results


def compare_results(jorg_results, korg_data):
    """Compare Jorg results with Korg reference data"""
    if korg_data is None:
        print("\nSKIPPING: No Korg reference data available")
        return {}
    
    comparisons = {}
    
    for scheme_key in jorg_results:
        if not jorg_results[scheme_key]['success']:
            continue
            
        if scheme_key not in korg_data['results']:
            print(f"\nSKIPPING: No Korg reference for {scheme_key}")
            continue
        
        jorg_flux = jorg_results[scheme_key]['flux']
        korg_flux = np.array(korg_data['results'][scheme_key]['flux'])
        
        # Calculate relative differences
        rel_diff = np.abs(jorg_flux - korg_flux) / np.abs(korg_flux)
        max_rel_diff = np.max(rel_diff)
        mean_rel_diff = np.mean(rel_diff)
        
        comparisons[scheme_key] = {
            'max_relative_error': max_rel_diff,
            'mean_relative_error': mean_rel_diff,
            'agreement': max_rel_diff < 0.01  # 1% threshold
        }
        
        print(f"\n{scheme_key} Comparison:")
        print(f"  Max relative error: {max_rel_diff:.2%}")
        print(f"  Mean relative error: {mean_rel_diff:.2%}")
        print(f"  Agreement (<1%): {'✓' if comparisons[scheme_key]['agreement'] else '✗'}")
    
    return comparisons


def main():
    """Main validation test"""
    print("=" * 60)
    print("Radiative Transfer Validation: Jorg vs Korg.jl")
    print("=" * 60)
    
    # Test parameters
    n_layers = 20
    n_wavelengths = 10
    wavelengths = np.linspace(5000, 6000, n_wavelengths)  # Angstroms
    
    schemes_to_test = [
        ("anchored", "linear_flux_only"),
        ("anchored", "linear"),
        ("bezier", "linear")
    ]
    
    # Create test data
    print("\n1. Creating test atmosphere...")
    atmosphere = create_test_atmosphere(n_layers)
    print(f"   Layers: {n_layers}")
    print(f"   Temperature: {np.min(atmosphere['temperature']):.0f} - {np.max(atmosphere['temperature']):.0f} K")
    
    print("\n2. Creating test opacity and source function...")
    alpha, S = create_test_opacity_and_source(atmosphere, wavelengths)
    print(f"   α range: {np.min(alpha):.2e} - {np.max(alpha):.2e} cm⁻¹")
    print(f"   S range: {np.min(S):.2e} - {np.max(S):.2e} erg cm⁻² s⁻¹ sr⁻¹ Hz⁻¹")
    
    # Run Korg reference (optional)
    print("\n3. Running Korg reference test...")
    korg_data_dir = run_korg_reference_test()
    korg_data = load_korg_reference_data(korg_data_dir) if korg_data_dir else None
    
    if korg_data:
        print("   ✓ Korg reference data loaded")
    else:
        print("   ⚠ Korg reference not available, testing Jorg only")
    
    # Test Jorg implementation
    print("\n4. Testing Jorg radiative transfer...")
    jorg_results = test_jorg_radiative_transfer(atmosphere, alpha, S, wavelengths, schemes_to_test)
    
    # Compare results
    print("\n5. Comparing results...")
    comparisons = compare_results(jorg_results, korg_data)
    
    # Summary
    print("\n" + "=" * 60)
    print("VALIDATION SUMMARY")
    print("=" * 60)
    
    successful_schemes = sum(1 for r in jorg_results.values() if r['success'])
    total_schemes = len(schemes_to_test)
    
    print(f"Jorg Implementation: {successful_schemes}/{total_schemes} schemes successful")
    
    if comparisons:
        agreeing_schemes = sum(1 for c in comparisons.values() if c['agreement'])
        compared_schemes = len(comparisons)
        print(f"Korg Agreement: {agreeing_schemes}/{compared_schemes} schemes within 1%")
        
        if agreeing_schemes == compared_schemes:
            print("🎉 ALL TESTS PASSED - Jorg RT matches Korg.jl!")
        else:
            print("⚠️  Some schemes show differences > 1%")
    else:
        print("Korg Comparison: Not available")
        
    # Return results for further analysis
    return {
        'jorg_results': jorg_results,
        'korg_data': korg_data,
        'comparisons': comparisons,
        'success': successful_schemes == total_schemes and 
                  (not comparisons or all(c['agreement'] for c in comparisons.values()))
    }


if __name__ == "__main__":
    results = main()
    
    # Exit with appropriate code
    sys.exit(0 if results['success'] else 1)